[{"content":" My personal journal where I write articles on QA and Automation. ","date":"1 November 2022","permalink":"/post/","section":"Articles","summary":" My personal journal where I write articles on QA and Automation. ","title":"Articles"},{"content":"","date":"1 November 2022","permalink":"/tags/authentication/","section":"Tags","summary":"","title":"Authentication"},{"content":" Login pop-ups have become an integral part of every business website today. Let us look at an example of a login popup.\nNormally there would be two scenarios on how the website accepts the user credentials:\nThe user enters the username and password on the web page itself in a form field\nA window popup appears where the user can enter their username and password\nFor cases where there is a window popup for authentication, it becomes challenging with Selenium, as it cannot inspect such elements and hence, testers cannot get locators in Selenium of such elements to interact with. So, how do testers automate such scenarios in Selenium?\nThere are possibly three different ways:\nPassing credentials in the URL\nUsing AutoIt tool\nUsing ChromeDevTools Protocols API (introduced in Selenium 4)\nWhat is an Authentication Pop-up # When users access any protected web URL, an authentication pop up is displayed to enter credentials. These types of popups normally use Basic Authentication, which is a method for an HTTP user agent (For example: a web browser) to provide a username and password when making a request.\nThe client sends HTTP requests with the Authorization header that contains the word Basic followed by a space and a base64-encoded string username and password.\nAuthorization header format\nAuthorization: Basic Credentials are a combination of username and password separated by a colon.\nadmin: admin\nFor example, to authorize as admin: admin the client would send the following\nAuthorization: Basic YWRtaW46YWRtaW4=\nWhen the server receives this request, it can access the Authorization header, decode the credentials, and look up the user to determine if they should be allowed access to the requested resource.\nNow let us dive into different ways to handle such login pop-ups.\nFor a Maven project, add the Selenium Java, WebDriverManager, and TestNG dependencies in the pom.xml file.\n\u0026lt;dependencies\u0026gt;\r\u0026lt;dependency\u0026gt;\r\u0026lt;groupId\u0026gt;org.seleniumhq.selenium\u0026lt;/groupId\u0026gt;\r\u0026lt;artifactId\u0026gt;selenium-java\u0026lt;/artifactId\u0026gt;\r\u0026lt;version\u0026gt;3.141.59\u0026lt;/version\u0026gt;\r\u0026lt;/dependency\u0026gt;\r\u0026lt;dependency\u0026gt;\r\u0026lt;groupId\u0026gt;io.github.bonigarcia\u0026lt;/groupId\u0026gt;\r\u0026lt;artifactId\u0026gt;webdrivermanager\u0026lt;/artifactId\u0026gt;\r\u0026lt;version\u0026gt;5.2.1\u0026lt;/version\u0026gt;\r\u0026lt;/dependency\u0026gt;\r\u0026lt;dependency\u0026gt;\r\u0026lt;groupId\u0026gt;org.testng\u0026lt;/groupId\u0026gt;\r\u0026lt;artifactId\u0026gt;testng\u0026lt;/artifactId\u0026gt;\r\u0026lt;version\u0026gt;7.6.1\u0026lt;/version\u0026gt;\r\u0026lt;/dependency\u0026gt;\r\u0026lt;/dependencies\u0026gt; Passing credentials in the URL # This is the simplest alternative by directly passing username and password in the URL separated by colon. After “https://” and before domain name, pass credentials as : followed by “@”.\nSyntax: https://:@\nExample: https://admin:admin@the-internet.herokuapp.com/basic_auth\npublic class PassingInURL {\rWebDriver driver;\rString username;\rString password;\rString domain;\rString url;\r@BeforeTest\rpublic void setUp() {\rWebDriverManager.edgedriver().setup();\r// Instantiate the webdriver\rdriver = new EdgeDriver();\rusername = “admin”;\rpassword = “admin”;\rdomain = “the-internet.herokuapp.com/basic_auth”;\r}\r@Test\rpublic void launch() {\rurl = “https://” + username + “:” + password + “@” + domain;\rdriver.get(url);\rString text = driver.findElement(By.cssSelector(“div.example p”)).getText().trim();\rAssert.assertEquals(text, “Congratulations! You must have the proper credentials.”);\r}\r@AfterTest\rpublic void tearDown() {\rdriver.quit();\r}\r} Using AutoIt tool # AutoIt is a third-party tool that can be integrated with Selenium script to help automate popups in Windows. Auto IT is freeware scripting language designed to automate Windows GUI. It uses a combination of mouse movement, keystrokes, and window control manipulation to automate a workflow in Windows which is not possible with Selenium.\nHow to Install AutoIt # Go to the official download page of AutoIt and download the AutoIt software zip file. Go to AutoIt script editor download page and download AutoIt script Editor executable. Move both the files to any preferred location in your system and extract the AutoIt zip file. There should be two executables now “autoit-v3-setup.exe” and “SciTE4AutoIt3.exe” Finish installation of both the files in the system and browse till “C:\\Program Files (x86)\\ AutoIt3” to discover the AutoIt folder as AutoIt executables are 32 bit. Creating AutoIt script # Browse to “C:\\Program Files (x86)\\AutoIt3\\SciTE” and double-click “SciTE.exe” to launch AutoIt editor. Enter the below code to pass username and password in AutoIt editor and save the file with extension .au3 Example: Login.au3\nSend(“admin”)\rSend(“{TAB}”)\rSend(“admin”)\rSend(“{ENTER}”) Right-click the created script(Login.au3) and choose “Compile script (x64)/ Compile script (x64) “ depending on your Windows configuration and observe that “Login.exe” is generated.\nNow after the driver.get() method you can put the AutoIt executable path as below\nRuntime.getRuntime().exec(“D:\\\\Auto IT\\\\Login.exe”); public class AutoIT {\rWebDriver driver;\rString url;\r@BeforeTest\rpublic void setUp() {\rWebDriverManager.chromedriver().setup();\r// Instantiate the webdriver\rdriver = new ChromeDriver();\rurl = “http://the-internet.herokuapp.com/basic_auth”;\r}\r@Test\rpublic void launch() throws InterruptedException, IOException {\rdriver.get(url);\rdriver.manage().timeouts().pageLoadTimeout(10, TimeUnit.SECONDS);\rRuntime.getRuntime().exec(“D:\\\\Auto IT\\\\Login.exe”);\rThread.sleep(2000);\rString text = driver.findElement(By.cssSelector(“div.example p”)).getText().trim();\rAssert.assertEquals(text, “Congratulations! You must have the proper credentials.”);\r}\r@AfterTest\rpublic void tearDown() {\rdriver.quit();\r}\r} Using ChromeDevTools Protocols API # Selenium 4 has introduced a new API that grants access to Chrome DevTools directly from your automated tests. This is done via the Chrome DevTools protocol (CDP), which is essentially a set of tools that enables you to access and control Chromium-based browsers.\nAdd below Selenium4 dependency instead of Selenium3 to pom.xml file and save it:\n\u0026lt;dependencies\u0026gt;\r\u0026lt;dependency\u0026gt;\r\u0026lt;groupId\u0026gt;org.seleniumhq.selenium\u0026lt;/groupId\u0026gt;\r\u0026lt;artifactId\u0026gt;selenium-java\u0026lt;/artifactId\u0026gt;\r\u0026lt;version\u0026gt;4.0.0-alpha-6\u0026lt;/version\u0026gt;\r\u0026lt;/dependency\u0026gt;\r\u0026lt;/dependencies\u0026gt; DevTools is a class that provides various methods to handle developer options, such as createSession, addListener, close and send.\nThe getDevTools() method returns the new DevTools object which allows you to send() the built-in Selenium commands for CDP.\nSteps to use Chrome DevTools:\nChromeDev Tools works only for Chromium-based browsers such as Google Chrome and Microsoft Edge. So, we need to create a driver instance of ChromeDriver or EdgeDriver. ChromeDriver driver=new ChromeDriver() OR\nEdgeDriver driver=new EdgeDriver() Get the dev tools from following code and create a new session DevTools devTools = driver.getDevTools();\rdevTools.createSession(); Enable the network domain of dev tools devTools.send(Network.enable(Optional.empty(), Optional.empty(), Optional.empty())); You can pass Optional.empty() in case you do not have to specify any network.\nConcatenate username and password separated by colon and store it any String object String auth = username + “:” + password; Encode the username and password using Base64 from java.util package String encodeToString = Base64.getEncoder().encodeToString(auth.getBytes()); Finally pass the network header as Authorization: Basic using HashMap Map\u0026lt;String, Object\u0026gt; headers = new HashMap\u0026lt;\u0026gt;();\rheaders.put(“Authorization”, “Basic ” + encodeToString); Now as the header is set, we can invoke the website by driver.get() driver.get(“https://the-internet.herokuapp.com/basic_auth”);\rpublic class BasicAuthSelenium4 {\rChromeDriver driver;\r@BeforeTest\rpublic void setup() {\r// Setup Chrome driver\rWebDriverManager.chromedriver().setup();\rdriver = new ChromeDriver();\rdriver.manage().window().maximize();\rdriver.manage().timeouts().implicitlyWait(30, SECONDS);\r// Authentication username \u0026amp; password\rString username = “admin”;\rString password = “admin”;\r// Get the devtools from the running driver and create a session\rDevTools devTools = driver.getDevTools();\rdevTools.createSession();\r// Enable the Network domain of devtools\rdevTools.send(Network.enable(Optional.empty(), Optional.empty(), Optional.empty()));\rString auth = username + “:” + password;\r// Encoding the username and password using Base64\rString encodeToString = Base64.getEncoder().encodeToString(auth.getBytes());\rSystem.out.println(“Encoded String: ” + encodeToString);\r// Pass the network header as Authorization : Basic \u0026lt;encoded String\u0026gt;\rMap\u0026lt;String, Object\u0026gt; headers = new HashMap\u0026lt;\u0026gt;();\rheaders.put(“Authorization”, “Basic ” + encodeToString);\rdevTools.send(Network.setExtraHTTPHeaders(new Headers(headers)));\r}\r@Test\rpublic void launch() {\rdriver.get(“https://the-internet.herokuapp.com/basic_auth”);\rString text = driver.findElement(By.cssSelector(“div.example p”)).getText().trim();\rAssert.assertEquals(text, “Congratulations! You must have the proper credentials.”);\r}\r@AfterTest\rpublic void tearDown() {\rdriver.quit();\r}\r} This article explains the different ways to automate Window login popups in Selenium script. Passing credentials in the URL itself is an insecure approach as it may expose credentials in insecure contexts. Auto IT requires additional installation and configuration to work with the Selenium script. So, if we compare all three, using ChromeDevTools Protocols is the best approach so far.\nOriginally contributed by me at https://www.browserstack.com/guide/handling-login-popups-in-selenium-webdriver-and-java\n","date":"1 November 2022","permalink":"/post/handling-popups-selenium-java/","section":"Articles","summary":"Login Popup are a common sight in web applications. Learn how to handle these Login Popus in Selenium Webdriver and Java effectively.","title":"Handling Login Popups in Selenium WebDriver and Java"},{"content":"","date":"1 November 2022","permalink":"/tags/login/","section":"Tags","summary":"","title":"login"},{"content":"","date":"1 November 2022","permalink":"/tags/selenium/","section":"Tags","summary":"","title":"Selenium"},{"content":"","date":"1 November 2022","permalink":"/tags/","section":"Tags","summary":"","title":"Tags"},{"content":" My personal journal where I write articles on QA and Automation. # ","date":"1 November 2022","permalink":"/","section":"Welcome to my blog! 🎉","summary":" My personal journal where I write articles on QA and Automation. # ","title":"Welcome to my blog! 🎉"},{"content":"","date":"7 October 2022","permalink":"/tags/page-object-model/","section":"Tags","summary":"","title":"Page Object Model"},{"content":" What is Playwright # Playwright an end-to-end web automation tool is getting popular nowadays due to its advanced features such as auto-waiting of web elements before performing any action (click, fill, select, etc), testing in full isolation (incognito mode of browser), download and upload of files at ease, etc.\nIn this article, I have explained the core classes used to get started with the first Playwright script. Later I also explained how to create a framework using the Page Object Model and TestNG.\nPlaywright is an interface that provides a method to launch a browser instance (Chromium/Chrome/Firefox/WebKit).\nPlaywright playwright = Playwright.create(); A Browser is created via BrowserType.launch()\nBrowser browser= playwright.chromium().launch(); By default, Playwright launches the browser in headless mode. If you need to run in non-headless mode, you can disable headless mode by passing in a LaunchOption.\nBrowser browser = playwright.chromium().launch(new BrowserType.LaunchOptions().setHeadless(false)); BrowserContext provides a way to operate multiple independent browser sessions.\nBrowserContext browserContext=browser.newContext(); Now that we have the browser, we need to launch the website under test. To do so, we need Page class which provides methods to interact with a single tab in a browser.\nPage page= browserContext.newPage(); navigate() method of Page Class helps to redirect to the requested URL.\npage.navigate(\u0026#34;http://google.com\u0026#34;); These steps help you launch the website under test which is nothing but a precondition to run any test in the framework. You may add all these details to a BaseTest and create test cases that should extend this class.\nLet us start with the framework creation!\nFramework creation # For a Maven project, add the following dependencies:\n\u0026lt;dependencies\u0026gt;\r\u0026lt;dependency\u0026gt;\r\u0026lt;groupId\u0026gt;com.microsoft.playwright\u0026lt;/groupId\u0026gt;\r\u0026lt;artifactId\u0026gt;playwright\u0026lt;/artifactId\u0026gt;\r\u0026lt;version\u0026gt;1.23.0\u0026lt;/version\u0026gt;\r\u0026lt;/dependency\u0026gt;\r\u0026lt;dependency\u0026gt;\r\u0026lt;groupId\u0026gt;org.testng\u0026lt;/groupId\u0026gt;\r\u0026lt;artifactId\u0026gt;testng\u0026lt;/artifactId\u0026gt;\r\u0026lt;version\u0026gt;7.6.0\u0026lt;/version\u0026gt;\r\u0026lt;/dependency\u0026gt;\r\u0026lt;/dependencies\u0026gt; Create a package under src/main/java as \u0026ldquo;com.qa.base\u0026rdquo;. Under this package create a PlaywrightFactory class. public class PlaywrightFactory {\rPlaywright playwright;\rprotected Page page;\rBrowser browser;\rBrowserContext browserContext;\r@Parameters({\u0026#34;appURL\u0026#34;, \u0026#34;browserType\u0026#34;})\rpublic Page getPage(String appURL, String browserType) {\rplaywright = Playwright.create();\rswitch (browserType) {\rcase \u0026#34;chrome\u0026#34;:\rbrowser = playwright.chromium().launch(new BrowserType.LaunchOptions().setChannel(\u0026#34;chrome\u0026#34;).setHeadless(false));\rbreak;\rcase \u0026#34;chromium\u0026#34;:\rbrowser = playwright.chromium().launch(new BrowserType.LaunchOptions().setHeadless(false));\rcase \u0026#34;firefox\u0026#34;:\rbrowser = playwright.firefox().launch(new BrowserType.LaunchOptions().setChannel(\u0026#34;chrome\u0026#34;).setHeadless(false));\rbreak;\rcase \u0026#34;safari\u0026#34;:\rbrowser = playwright.webkit().launch(new BrowserType.LaunchOptions().setChannel(\u0026#34;chrome\u0026#34;).setHeadless(false));\rbreak;\rdefault:\rbreak;\r}\rbrowserContext = browser.newContext();\rpage = browserContext.newPage();\rpage.navigate(appURL);\rreturn page;\r}\r} This class takes 2 parameters from the testing.xml file as \u0026ldquo;appURL\u0026rdquo; and \u0026ldquo;browserType\u0026rdquo;. You may pass your requirement for these parameters in the testing.xml file.\nCreate testng.xml file \u0026lt;?xml version=\u0026#34;1.0\u0026#34; encoding=\u0026#34;UTF-8\u0026#34;?\u0026gt;\r\u0026lt;!DOCTYPE suite SYSTEM \u0026#34;https://testng.org/testng-1.0.dtd\u0026#34;\u0026gt;\r\u0026lt;suite name=\u0026#34;Suite\u0026#34;\u0026gt;\r\u0026lt;parameter name=\u0026#34;appURL\u0026#34; value=\u0026#34;http://automationpractice.com/index.php\u0026#34;\u0026gt;\u0026lt;/parameter\u0026gt;\r\u0026lt;parameter name=\u0026#34;browserType\u0026#34; value=\u0026#34;chrome\u0026#34;\u0026gt;\u0026lt;/parameter\u0026gt;\r\u0026lt;test thread-count=\u0026#34;5\u0026#34; name=\u0026#34;Test\u0026#34;\u0026gt;\r\u0026lt;classes\u0026gt;\r\u0026lt;class name=\u0026#34;com.qa.testcases.PlayTest\u0026#34;/\u0026gt;\r\u0026lt;/classes\u0026gt;\r\u0026lt;/test\u0026gt; \u0026lt;!-- Test --\u0026gt;\r\u0026lt;/suite\u0026gt; \u0026lt;!-- Suite --\u0026gt; Create a package under src/main/java as \u0026ldquo;com.qa.pages\u0026rdquo;. Under this package create a BaseTest class. public class BaseTest {\rprotected Page page;\rprotected HomePage hp;\rprotected SearchPage search;\rPlaywrightFactory play;\r@BeforeClass\r@Parameters({ \u0026#34;appURL\u0026#34;, \u0026#34;browserType\u0026#34; })\rpublic void setUp(String appURL, String browserType) {\rplay = new PlaywrightFactory();\rpage = play.getPage(appURL, browserType);\rhp = new HomePage(page);\r}\r@AfterClass\rpublic void tearDown() {\rpage.context().browser().close();\r}\r} This class has two annotations @BeforeClass and @AfterClass having methods setUp() and tearDown() respectively. setUp() method launches the desired webpage under test before any test class is executed. teardown() method closes the browser after all the methods for a test class are executed completely.\nUnder \u0026ldquo;com.qa.pages\u0026rdquo; package, create two classes HomePage and SearchPage. public class HomePage{\rPage page;\rprivate String search=\u0026#34;input#search_query_top\u0026#34;;\rpublic HomePage(Page page) {\rthis.page=page;\r}\rpublic SearchPage search(String searchTxt) {\rpage.locator(search).fill(searchTxt);\rreturn new SearchPage(page);\r}\r} This class has page locators in the form of a String, required action methods, and a page constructor.\nFinally create a package under src/main/test as \u0026ldquo;com.qa.testcases\u0026rdquo;. Under this package create a PlayTest class. public class PlayTest extends BaseTest {\r@Test(priority = 1)\rpublic void verifyTitle() {\rAssert.assertEquals(page.title(), \u0026#34;My Store\u0026#34;);\r}\r@Test(priority = 2)\rpublic void verifySearch() {\rsearch = hp.search(\u0026#34;dress\u0026#34;);\rpage.keyboard().press(\u0026#34;Enter\u0026#34;);\rAssert.assertEquals(search.getSearchText().trim().toLowerCase(), \u0026#34;\\\u0026#34;dress\\\u0026#34;\u0026#34;);\r}\r} This is a test class having test methods and assertions. This class should extend BaseTest to call setUp() and tearDown() methods before running any @Test method.\nRun as testng.xml file as TestNG suite and see the result.\nTo get the complete code refer to my GitHub repository.\n","date":"7 October 2022","permalink":"/post/playwright-java-page-object-model/","section":"Articles","summary":"Learn the basics of creating a framework for POM in Playwright and Java.","title":"Page Object Model with Playwright + Java"},{"content":"","date":"7 October 2022","permalink":"/tags/playwright/","section":"Tags","summary":"","title":"playwright"},{"content":"","date":"7 October 2022","permalink":"/tags/pom/","section":"Tags","summary":"","title":"POM"},{"content":" Introduction # While testing websites, we may have come across a scenario where we need to verify whether the download functionality is working as expected or not. Many websites support downloading of invoices and PDF files. Clicking on any link/ file name/ Invoice/ PDF file on the webpage triggers the download and as a tester, we need to verify that it is downloaded in the system. To verify that it is downloaded we may verify its presence by navigating to the Downloads section of the system and checking the file manually.\nIn Selenium there are different ways to handle file download by using the AutoIT tool, Robot Class, or Browser Profile Setting. In Playwright, things are quite simple!\nFile download in Playwright # In Playwright, we just have to pass the click method which invokes the download as a Runnable callback function in the waitForDownload() method of the Page class.\nDownload download=page.waitForDownload(()-\u0026gt; {\rpage.locator(“a#windows-downloadbutton”).click();\r}); waitforDownload() performs the desired action and waits for the download to complete. It will throw an error if the page is closed before the download event is fired.\nUnlike Selenium, there is no need to write any wait condition until the download is completed. It keeps track internally of whether the file is downloaded or not.\nwaitForDownload() method returns a Download object. After the download is finished, we can fetch download details from this generated Download object (download). The download path becomes available once the download completes.\nLet us take an example of downloading Node.js from its official website https://nodejs.org/en/download/ and verify whether it gets downloaded or not.\npublic class DownloadFile {\rprotected static Page page;\rPlaywright playwright;\r@BeforeClass\rpublic void setUp() {\rplaywright = Playwright.create();\rBrowser browser = playwright.chromium().launch(new BrowserType.LaunchOptions().setHeadless(false));\rpage = browser.newPage();\r}\r@Test\rpublic void download() throws InterruptedException {\rpage.navigate(\u0026#34;https://nodejs.org/en/download/\u0026#34;);\rDownload download = page.waitForDownload(() -\u0026gt; {\rpage.locator(\u0026#34;a#windows-downloadbutton\u0026#34;).click();\r});\rSystem.out.println(\u0026#34;Download url: \u0026#34; + download.url());\rSystem.out.println(\u0026#34;Download page title: \u0026#34; + download.page().title());\rSystem.out.println(\u0026#34;Download path : \u0026#34; + download.path().toString());\rdownload.saveAs(Paths.get(\u0026#34;Nodejs.msi\u0026#34;));\rSystem.out.println(\u0026#34;Suggested file name: \u0026#34; + download.suggestedFilename());\r}\r@AfterClass\rpublic void tearDown() {\rpage.context().browser().close();\r}\r} Methods of Download class # Download.url(): Returns downloaded URL as a String download.url(); Download.page(): Get the page that the download belongs to. Download.page().title(): Returns the download page title.\ndownload.page().title() Download.path(): Returns path to the downloaded file in case of successful download. The method will wait for the download to finish if necessary. The method throws when connected remotely. Use path().toString to return the String representation of the path. download.path().toString() Download.suggestedFilename(): Returns suggested filename for this download. This filename can be later used for assertion. This downloads the file at a temporary location (C:\\Users\u0026lt;username\u0026gt;\\AppData\\Local\\Temp). To save as a file at the desired location, use the saveAs() method of Download Class.\ndownload.suggestedFilename() Download.saveAs(path): Copy the download to a user-specified path. It is safe to call this method while the download is still in progress. Will wait for the download to finish if necessary. saveAs() method takes the Path variable as a parameter.\ndownload.saveAs(Paths.get(“Nodejs.msi”)); Download.cancel(): Cancels a download. Will not fail if the download is already finished or canceled. Upon successful cancellations, download.failure() would resolve to \u0026ldquo;canceled\u0026rdquo;.\nDownload.failure(): Returns download error if any. Will wait for the download to finish if necessary.\ndownload.failure()\r@Test\rpublic void download() throws InterruptedException {\rpage.navigate(\u0026#34;https://nodejs.org/en/download/\u0026#34;);\rDownload download = page.waitForDownload(() -\u0026gt; {\rpage.locator(\u0026#34;a#windows-downloadbutton\u0026#34;).click();\r});\rdownload.cancel();\rSystem.out.println(\u0026#34;Download failure message: \u0026#34; + download.failure());\r} Download.delete(): Deletes the downloaded file. Will wait for the download to finish if necessary. download.delete() ","date":"4 October 2022","permalink":"/post/playwright-java-download-file/","section":"Articles","summary":"Article showing how to handle downloading of files in Playwright.","title":"Download file using Playwright Java"},{"content":"","date":"4 October 2022","permalink":"/tags/file-download/","section":"Tags","summary":"","title":"File download"},{"content":"","date":"4 October 2022","permalink":"/tags/waitfordownload/","section":"Tags","summary":"","title":"waitForDownload"},{"content":"","date":"25 September 2022","permalink":"/tags/thread/","section":"Tags","summary":"","title":"thread"},{"content":" Automation testing of web applications uses automation tools to execute the test cases instead of a human manually executing them. It has benefited many organizations by reducing the time of manually testing the build/product, increasing test coverage, supporting cross browser testing, and leveraging automatic concise reports for better debugging.\nCreating a robust automation framework is the desire of every automation tester. To achieve this, it is a must to write test cases in such a manner that automation test results are always genuine.\nHowever, at times it is observed that there are some failures while running the automation suite, and the same use case, when performed manually, actually passes the test. Such cases make tests flaky, causing false positives. Hence, it is essential to find a workable solution that can reduce flakiness and enhance the overall test accuracy.\nWhy do you need wait commands in Selenium? # Most modern web applications are built using Ajax and JavaScript and are based on popular frameworks such as AngularJS and ReactJS. These technologies take a certain time to load elements when the page is loaded for the first time or refreshed.\nWhile using browser automation and trying to locate web elements in such applications using Selenium, it cannot find the element as the event happens in a fraction of a second, and hence it throws NoSuchElementException.\nThis might be quite surprising since you can easily see the element present on the DOM while inspecting the page. This is one of the unpredictable behaviours, which needs to be handled by applying proper wait commands.\nProviding proper wait commands in Selenium script is very important as they make the scripts more reliable, thereby ensuring automation yields accurate results.\nTypes of Selenium Wait Commands # Implicit wait: This is used to tell the WebDriver to wait for a certain amount of time before it throws a “NoSuchElementException”. This wait is applied globally, which means that the same wait mechanism will work for all the elements in the given code.\ndriver.manage().timeouts().implicitlyWait(20, TimeUnit.SECONDS); In the above example, if the element is not located on the webpage within 20 secs, it will throw an exception automatically.\nExplicit wait: This is used to tell the WebDriver to wait for certain expected conditions or maximum time exceeded before throwing an “ElementNotVisibleException” exception. It is an intelligent kind of wait but can be applied only for specified elements. WebDriverWait wait=new WebDriverWait(driver, 20);\rwait.until(ExpectedConditions.visibilityOf(element)); In this case, Webdriver will wait explicitly for 20 secs for the element to be visible, and if it is not visible, it will throw an exception.\nWhy and when to use Thread.sleep in Selenium? # Now, the question arises, if Selenium provides these two types of wait commands, why would an automation tester opt for using Thread.sleep(). It would be interesting to know the role of Thread.sleep() command.\nBelow are some of the scenarios where Thread.sleep() comes to the rescue when none of the wait mechanisms works.\nTesting dynamic Web Elements Many web applications have a carousel implementation to display dynamic content. If you need to verify the visibility of the next item in the carousel, it is always better to use Thread.sleep() instead of Selenium waits as the carousel items are very dynamically displayed.\nThird-party testing Nowadays, almost every web application has integration with third-party websites. Along with testing AUT (Application Under Test), you also need to validate that after clicking on any third-party link, it navigates to the valid webpage, and the page loads properly.\nTo assert this behaviour it is wise to use Thread.sleep() as it is very unpredictable to verify the load time of any third-party website.\nSwitching Windows or Tabs Clicking on some of the links on the webpage opens them in a new browser window tab or a new browser instance. In such cases, to perform browser automation tests, you need to switch the driver to the new browser window tab/ browser instance and perform actions on it.\nWhen you switch and directly perform any automation event, it will throw NoSuchElementException as the WebDriver has just switched and it is unable to locate the element. Applying Thread.sleep() after the switch command helps to solve this.\nSwitching iFrame Some web applications use iframe within the webpage. In such cases, to perform any action on the iframe elements, you first need to switch to the iframe and then perform the required action on it.\nWhen you switch and perform any automation event on the iframe web elements without applying any wait, Selenium will throw NoSuchElementException. Thread.sleep() can be applied after the iframe switch command to avoid the exception.\nThread.Sleep in Selenium Java # While the above scenarios justify why Thread.sleep() command in Selenium Java is important. Let’s understand Thread.sleep() function in detail using some points below:\nAs per the official definition from the Oracle Java Documentation, Thread.sleep() causes the current thread to suspend execution for a specified period.\nThread.sleep() is not a Selenium wait, it is provided by Java.\nIt suspends the code for the specified time and can be useful in debugging the script under test.\nThread class is a class present in Java.lang package that is basically a thread of execution of the programs.\nThread class has two overloaded sleep methods, Thread.sleep(long millis) and Thread.sleep(long millis, int nanos).\nThread.sleep(long millis) Thread.sleep(2000): Duration is in milliseconds for which thread will sleep.\nThread.sleep(long millis, int nanos) Thread.sleep(2000, 2000): The second parameter is an additional time in nanoseconds for which thread will sleep. It ranges from 0 to 999999.\nThread.sleep() does not have a return type, and it returns void.\nThread.sleep methods throws InterruptedException when any other thread interrupts the current thread and should be handled by the throws method or try catch block.\ntry {\rThread.sleep(2000);\r} catch (InterruptedException e) {\r// TODO Auto-generated catch block\re.printStackTrace();\r} OR\npublic void threadTest() throws InterruptedException {\rThread.sleep(2000);\r} It throws an IllegalArgumentException when sleep time is negative. Thread.sleep(-2000;) Both the sleep() methods of Thread class are static methods. Hence, they should be accessed in a static way by using class name. Thread.sleep(2000); Now that it is discussed, why and how to use Thread.sleep() in the Selenium test, let’s see an example demonstrating the same.\nIn the example, using the MakeMyTrip website, which will take some time to load after clicking on the “Hotels” tab. And when Selenium tries to locate and click on the Search button on the “Hotels” page, it will throw NoSuchElementException as the element was not loaded before clicking on it.\nExample 1: Testing Dynamic Web Elements\npublic class ThreadSleep { static WebDriver driver;\rstatic String url = \u0026#34;https://www.makemytrip.com/\u0026#34;;\r@BeforeClass\rpublic static void setUp() {\rWebDriverManager.chromedriver().setup();\rdriver = new ChromeDriver();\rdriver.manage().window().maximize();\r//Launch MakeMyTrip website\rdriver.get(url);\r} @Test\rpublic void search () throws InterruptedException {\r//Click on Hotels tab\rdriver.findElement(By.cssSelector(\u0026#34;li.menu_Hotels\u0026#34;)).click();\r//Click on Search button\rdriver.findElement(By.cssSelector(\u0026#34;button#hsw_search_button\u0026#34;)).click();\rList\u0026lt;WebElement\u0026gt; hotels = driver.findElements(By.xpath(\u0026#34;//span[contains(@id, \u0026#39;htl_id_seo_\u0026#39;)]\u0026#34;));\r//Click on the first search result\rhotels.get(0).click();\r}\r@AfterClass\rpublic void tearDown() {\rdriver.quit();\r}\r} Run the above program and observe that Selenium will throw NoSuchElementException at line 34.\nAdd Thread.sleep(2000) after line 33 and run the program again. This time the program will pass as the thread got paused for 2 secs, and the Search web element was loaded before clicking on it.\nExample 2: Third-Party Testing\nIn this example, on the MakeMyTrip home page, click on the facebook link from footer links and verify that it is redirecting to the MakeMyTrip facebook page.\npublic class ThreadSleep { static WebDriver driver; static String url = \u0026ldquo;https://www.makemytrip.com/\u0026quot;;\n@BeforeClass public static void setUp() { WebDriverManager.chromedriver().setup(); driver = new ChromeDriver(); driver.manage().window().maximize(); // Launch MakeMyTrip website driver.get(url); }\n@Test public void facebookClick() throws InterruptedException { JavascriptExecutor js = (JavascriptExecutor) driver; WebElement wb = driver.findElement(By.xpath(\u0026rdquo;//a[contains(@href, \u0026lsquo;facebook\u0026rsquo;)]/span\u0026quot;)); js.executeScript(\u0026ldquo;arguments[0].click();\u0026rdquo;, wb); Assert.assertEquals(driver.getCurrentUrl(), \u0026ldquo;https://www.facebook.com/makemytrip/\u0026quot;); }\n@AfterClass public void tearDown() { driver.quit(); }\nRun the above program and observe that Selenium throws AssertionError since the expected page was [https://www.facebook.com/makemytrip/] but Selenium found [https://www.makemytrip.com/]\nThis happens as Selenium could not wait for the redirected page to load completely and returns the previous page url instead of the redirected url. Hence, using Thread.sleep() gives the redirected page a time window of few seconds to load completely, before returning the page URL.\nLimitations of Thread.sleep # Using Thread.sleep() frequently in an automation framework is not a good practice. If the applied sleep is of 5 secs and the web element is displayed in 2 secs only, the extra 3 secs will increase the execution time. And if you use it more often in the framework, the execution time would increase drastically.\nYou always have to guess and apply Thread.sleep() seconds in advance, as there is no guarantee that the web element would be discoverable under that specified time.\nOn a closing note -\nHowever, as discussed in this article, when none of the Selenium wait commands work to locate the web element, Thread.sleep() can be used to avoid unnecessary failures in the automation script.\nOriginally contributed by me at https://www.browserstack.com/guide/thread-sleep-in-selenium\n","date":"25 September 2022","permalink":"/post/athread-sleep/","section":"Articles","summary":"This guide discusses the role of Thread Sleep Command in Selenium Java, how and when to use it effectively.","title":"Understanding Role of Thread.sleep in Selenium"},{"content":"","date":"8 July 2022","permalink":"/tags/inspect/","section":"Tags","summary":"","title":"inspect"},{"content":"","date":"8 July 2022","permalink":"/tags/playwright-inspector/","section":"Tags","summary":"","title":"playwright inspector"},{"content":" Introduction # In my previous post on Playwright, I highlighted some key features of the Playwright tool. In this article, I am going to explain how to record and run your first script in Java using Playwright CLI.\nGenerating automated script using Playwright Inspector # Open the command prompt and paste the below CLI command, hit enter\nmvn exec:java -e -Dexec.mainClass=com.microsoft.playwright.CLI -Dexec.args=\u0026#34;https://demo.guru99.com/test/newtours/\u0026#34; I am using the NewTours website to demonstrate this functionality.\nIf you see any error saying \u0026ldquo;Please verify you invoked Maven from the correct directory.\u0026rdquo;, this is because it\u0026rsquo;s a Maven execution command and it requires Maven to be configured in the directory from where you are invoking this command.\nSo, the best you can do is go to the folder where you have your Maven projects (where the pom.xml file is present) and open the command prompt at that location and hit the above command again. (If you don\u0026rsquo;t have any Maven projects with you, you can clone my repository in your system and use this command at that location. Maven should be available in your system and the Maven path should be set up in the environment variable)\nThe above code will open the NewTours website in chromium browser and you can see elements getting highlighted with the red background when you mouse hover on them. Hover on some more elements and you should see locators suggested by Playwright. This is an awesome feature of Playwright which no other record and play feature of any automation suite provide us!\nYou will also see the Playwright Inspector window which has the java code of the launch website scenario which we just performed with the CLI command.\nAfter this, simply login into the website (chromium browser opened through Playwright CLI command) with username as \u0026ldquo;admin\u0026rdquo; and password as \u0026ldquo;admin\u0026rdquo; and observe the Playwright Inspector. It will now have all the actions performed by you which are entering the username and password, and clicking on submit button.\nPlaywright inspector uses the relative locators of the elements and lastly, it performs an assert too. Isn\u0026rsquo;t this amazing?!\nRunning the generated code in Eclipse editor # Copy the entire script and paste it into your editor and save it. Run the program and it will run fine without any errors.\nYou may also change the language and then copy the script.\nAfter pasting the script in any java editor, you may also change the browser to Firefox, WebKit, or Chrome as Playwright by default runs the tests over Chromium browser.\nDebugging the generated script # Now, this is something very interesting as inbuilt debugging is generally not provided by any automation suite/library. So, let us see how we can do that in Playwright.\nRight-click on the program on eclipse, which you generated through Playwright Inspector, hover on \u0026ldquo;Run As\u0026rdquo; and click on \u0026ldquo;Run Configurations\u0026rdquo; Click on the \u0026ldquo;Environment\u0026rdquo; tab, and click on \u0026ldquo;Add\u0026rdquo;. Enter Name= PWDEBUG and Value= 1 Click on the \u0026ldquo;OK\u0026rdquo; button and click on the Run button. Default blank chromium browser and Playwright inspector would be launched.\nNow, you can click on Step Over button to execute the script line by line. Click on the step-over button and observe the first line of the script will get executed. The NewsTour website would be launched and respective action details would be captured on the Playwright inspector.\nThe actions which are executed will have a tick sign and the action which are waiting to be executed next will have a pause sign in front of it respectively.\nYou can click on the \u0026gt; button before the action command to get all the events executed for that command. You can use the resume button in Playwright inspector to execute the whole script at once. Adding more steps to the generated script # If you want to add more steps to your already generated script you can do that as well. Say for example after launching the NewsTour website and before login, you want to click on the \u0026ldquo;Register\u0026rdquo; link and click on \u0026ldquo;Home\u0026rdquo;.\nSimply run the program in debug mode as mentioned in the above steps and let the browser and inspector open.\nClick on step over to launch the website. Now click on the record button on the inspector and do the required steps on chromium browser (Click on Register and click on Home). Now, if you wish to add the generated steps to your existing program, you can copy and paste them into the existing program on the editor.\n","date":"8 July 2022","permalink":"/post/playwright-inspect/","section":"Articles","summary":"See how to record and run your first script in Java using Playwright CLI.","title":"Playwright Inspector | Playwright Debugging"},{"content":"","date":"4 July 2022","permalink":"/tags/automation/","section":"Tags","summary":"","title":"automation"},{"content":"","date":"4 July 2022","permalink":"/tags/playright/","section":"Tags","summary":"","title":"playright"},{"content":" Introduction # Playwright is an open-source web automation library based on node js, that is built on top of Puppeteer.\nMicrosoft hired the Puppeteer team and maintained and developed Playwright under its license. The repository is available on GitHub.\nPlaywright is getting popular day by day because of its various inbuilt features which will make life easier for any web automation tester.\nThe common challenges faced by web automation testers are slowness of execution, lots of wait time for the element to be actionable, various steps to achieve cross-browser and parallel execution, 4–5 lines of code to achieve switching between windows tabs, upload and download of files. The playwright solves them all by providing some super features.\nThe documentation provided by them is so detailed and explanatory that you can get started with it without any more references.\nFeatures # Below are some of the key features of Playwright (as mentioned at https://playwright.dev/java)\nCross browser, cross platform, and cross language: It supports Chromium, Chrome, Firefox, WebKit (Safari). And when they say webkit, it means that even if you don’t have a Mac system you can still run your testcases on the Safari browser and verify them on your non-Mac system. Isn’t this amazing?! Auto-wait: Playwright waits for elements to be actionable prior to performing actions. It also has a rich set of introspection events. The combination of the two eliminates the need for artificial timeouts — the primary cause of flaky tests. In Selenium we must use implicitly wait and for some elements explicitly wait for such scenarios. Web-first assertions: Playwright assertions are created specifically for the dynamic web. Checks are automatically retried until the necessary conditions are met. Codegen: This enables you to generate tests by recording your actions. Save them in any language. You can copy the entire generated script and simply paste it into your editor, save it and run the test cases. Playwright inspector: Inspect page, generate selectors, step through the test execution, see click points, and explore execution logs. Trace Viewer: Capture all the information to investigate the test failure. Playwright trace contains test execution screencast, live DOM snapshots, action explorer, test source, and many more. This will be saved in a zip file. First playwright script in Java # Before proceeding, please make sure you should have the latest node js installed in your system. You can download it from its official website.\nCreate a maven project in your editor and add the following dependency to the pom.xml \u0026lt;dependency\u0026gt; \u0026lt;groupId\u0026gt;com.microsoft.playwright\u0026lt;/groupId\u0026gt; \u0026lt;artifactId\u0026gt;playwright\u0026lt;/artifactId\u0026gt; \u0026lt;version\u0026gt;1.23.0\u0026lt;/version\u0026gt; \u0026lt;/dependency\u0026gt; Latest version is 1.23.0. Save the pom.xml and wait till all the dependencies are downloaded and available under Maven Dependencies. If your project is showing the Java version as JavaSE-1.5, update it to JavaSE-1.8. Now, you can start with your first testcase in Playwright. public class PlayWrightTest { public static void main(String[] args) { try (Playwright playwright = Playwright.create()) { Browser browser = playwright.chromium().launch(); Page page = browser.newPage(); page.navigate(\u0026#34;http://google.com\u0026#34;); System.out.println(page.title()); } } } Playwright works on 3 main Interfaces \u0026ndash; Browser, Browser Context, and Page.\nPlaywright is an interface (just like WebDriver in Selenium) and provides a method to launch a browser instance. create() launches a new Playwright driver process and connects to it. Browser is an interface and it is used to create a browser via BrowserType.launch() BrowserContexts provide a way to operate multiple independent browser sessions. So, if you want to launch 2 chrome browsers or one chrome and another firefox, login with the same url and different logins you can achieve this with Playwright. Page provides methods to interact with a single tab in a Browser, or an extension background page in Chromium. newPage()Creates a new page in the browser context. navigate() Returns the main resource response. In selenium, we have the same method for driver object. Autodownload of Playwright binaries # In Selenium, to work on different browsers we have a concept called WebDriverManager. We need to add the maven dependency of it in pom.xml, save it, and then we can use it to create a different browser instance.\nIn playwright things are slightly different and much easier. It works on browser binaries, and it gets downloaded automatically when you run the above program.\nSo, when you run this program for the first time don’t be surprised if it takes more time, as Playwright is downloading the required binaries. Below code triggers to download the required binaries.\nPlaywright playwright = Playwright.create() And once it is downloaded, it gets saved under OS-specific cache folders.\nC:\\Users\\\u0026lt;UserName\u0026gt;\\AppData\\Local\\ms-playwright ---- on Windows system. ~/Library/Caches/ms-playwright ---- on MacOS ~/.cache/ms-playwright ---- on Linux And later you can see the program gets executed and results are displayed.\nYou won\u0026rsquo;t see the browser opening and the result will still be displayed as Playwright by default runs the testcases on headless mode.\nBrowser browser = playwright.chromium().launch(); To run the tescases on non-headless mode use the setHeadless method and set it to false.\nBrowser browser = playwright.chromium().launch(new BrowserType.LaunchOptions().setHeadless(false)); If ever, Playwright fails to download the required binaries, you can manually download them by following CLI commands.\nRunning without arguments will install default browsers mvn exec:java -e -Dexec.mainClass=com.microsoft.playwright.CLI -Dexec.args=”install” Install WebKit, where you may replace \u0026ldquo;webkit\u0026rdquo; with \u0026ldquo;chrome/chromium/firefox\u0026rdquo; to download the respective browser mvn exec:java -e -Dexec.mainClass=com.microsoft.playwright.CLI -Dexec.args=\u0026#34;install webkit\u0026#34; ","date":"4 July 2022","permalink":"/post/playwright-web-automation/","section":"Articles","summary":"An introduction to the hot cake in town - Playwright!","title":"Playwright - Web Automation Made Easier"},{"content":"","date":"4 July 2022","permalink":"/tags/quality-assurance/","section":"Tags","summary":"","title":"quality-assurance"},{"content":" This is my personal journal where I write articles on QA and Automation. I enjoy the world of Quality Analysis and I have been a part of this domain since more than 12 years. I have been contributing towards the community by writing articles on various tools and concepts in the QA domain, mainly on web and mobile automation topics like Selenium, Java, TestNG, Karate and Reporting.\nFor any feedback or comments regarding my blog, you can connect with me on my email: sonaldwivedi[@]hotmail[.]com\n","date":"1 July 2022","permalink":"/about-me/","section":"Welcome to my blog! 🎉","summary":"This is my personal journal where I write articles on QA and Automation. I enjoy the world of Quality Analysis and I have been a part of this domain since more than 12 years. I have been contributing towards the community by writing articles on various tools and concepts in the QA domain, mainly on web and mobile automation topics like Selenium, Java, TestNG, Karate and Reporting.\nFor any feedback or comments regarding my blog, you can connect with me on my email: sonaldwivedi[@]hotmail[.]com","title":"About Me"},{"content":"","date":"20 June 2022","permalink":"/tags/bitbucket/","section":"Tags","summary":"","title":"Bitbucket"},{"content":"","date":"20 June 2022","permalink":"/tags/ci-cd/","section":"Tags","summary":"","title":"ci-cd"},{"content":"","date":"20 June 2022","permalink":"/tags/integration/","section":"Tags","summary":"","title":"Integration"},{"content":"","date":"20 June 2022","permalink":"/tags/jenkins/","section":"Tags","summary":"","title":"Jenkins"},{"content":" In my previous article, I explained how to integrate Allure reports in a Selenium project. In this article, I would be explaining the integration of Jenkins with Bitbucket for a Selenium project.\nIntroduction to Jenkins # Jenkins is an open-source automation tool written in Java that includes plugins for Continuous Integration. It enables you to automate the execution of a series of actions to achieve the Continuous Integration (CI) process. Jenkins is used to build and test your software projects continuously, making it easier for developers to incorporate changes to the project and for users to leverage a fresh build. To achieve this, we have to integrate it with any source code repository.\nPurpose: # This article targets mainly QA professionals who focus on automating the execution of Selenium scripts whenever a Bitbucket repo is modified. The Bitbucket repo will be connected to Jenkins via its in-built webhook functionality, and whenever the code changes, it would trigger a new Jenkins job.\nThe automation code base which I have used for testing this is Selenium + Java + Maven + Allure Reporting which is uploaded on the public servers of Bitbucket Repository Link. For other cases, it can be hosted internally on the respective organization\u0026rsquo;s domain.\nFor our current setup, since the code is hosted on Bitbucket\u0026rsquo;s public servers, our Jenkins servers need to be reachable by Bitbucket\u0026rsquo;s server - hence a public IP is required in this case. For another case where the code is hosted internally at the organizational level, both these servers should be able to communicate with each other on their respective ports.\nI have installed Jenkins on my home-based server on port 8080 and allowed access through my router\u0026rsquo;s firewall for this particular duo of server and port number. This would allow Bitbucket to access Jenkin\u0026rsquo;s webhook on my server.\nFor what purpose are we going to consume Jenkins CI for our Selenium automation project?\nThese are the most common scenarios:\nScenario 1 # There are times when the development team releases the build late at night and it is not feasible for the QA team to keep a run so late. So, we can achieve this nightly run with the help of Jenkins and the respective code repository.\nDevelopers mostly use GitLab, GitHub, or BitBucket as a version control system (VCS). Our aim is to achieve an automatic job run on Jenkins, whenever the developer pushes a new code to the SVN repository.\nScenario 2 # Here, you do not want to consume the developer\u0026rsquo;s code and you just want to run an automatic suite on Jenkins, as and when you push an update on your source code repository (in this case whenever a new update is pushed on your Bitbucket\u0026rsquo;s Selenium automation code repository).\nYou must have experienced that whenever you run your automation suite and if there are script errors - you need to fix the errors, upload the automation code to your server and then run the automation suite. Similarly, for code on local systems also you would need to run the automation suite again after fixing those errors. For avoiding this we can integrate Bitbucket (or any other VCS) with Jenkins which would automatically run the suite whenever it spots a code change in the SVN repository.\nJenkins installation on windows # I have already covered how to install Jenkins in Ubuntu. In this article, I am going to explain Jenkins\u0026rsquo;s installation on Windows and then integrate it with the Bitbucket project.\nGo to the Jenkins official website having permalink https://updates.jenkins-ci.org/download/war/ to download the latest Jenkins war file.\nMove it to a separate folder instead of Downloads (recommendation, not mandatory)\nGo to the folder where the Jenkins war file is placed. In my case, it is a folder named Jenkins in D drive. Open the command prompt at that location and type\njava -jar jenkins.war Jenkins installation will start and an admin password will be displayed at the console.\nJenkins by default runs on 8080 in the local machine. Go to browser and type \u0026ldquo;localhost:8080\u0026rdquo;, press enter. \u0026ldquo;Unlock Jenkins\u0026rdquo; screen will appear.\nPaste the password generated in the console and proceed. Click on \u0026ldquo;Install Suggested Plugins\u0026rdquo; and Jenkins will download all the basic configuration files. Make sure you are connected to the Internet and this may take some time depending on your bandwidth.\nRegistration screen appears, enter all the required details and click Save and continue.\nDefault Jenkins URL would be http://localhost:8080/. Click on \u0026ldquo;Save and Finish\u0026rdquo;. Click on \u0026ldquo;Start using Jenkins\u0026rdquo;. Jenkins home screen appears.\nDownload all the required plugins and configure them under Jenkin\u0026rsquo;s Global Tool Configuration. Refer to the below steps to achieve that.\nDownload required plugins # Now, the Selenium automation project which we want to integrate is a Maven project and I have used Allure reports as a reporting tool that is uploaded on the Bitbucket server. So, we need to download Maven, Allure, and Bitbucket plugins.\nClick on Manage Jenkins-\u0026gt; Manage Plug-Ins. Click on the \u0026ldquo;Available\u0026rdquo; tab and search \u0026ldquo;maven\u0026rdquo;. Check all the plugins which have maven in their title and click on any one of the buttons \u0026ldquo;Install without restart\u0026rdquo; or \u0026ldquo;Download now and install after restart\u0026rdquo; I have already installed so it is available under the \u0026ldquo;Installed\u0026rdquo; tab.\nSimilarly, search \u0026ldquo;Allure\u0026rdquo; and \u0026ldquo;Bitbucket\u0026rdquo; and download plugins in Jenkins. Global Configurations in Jenkins # After this, we need to configure java, maven, git, and allure in Jenkins\u0026rsquo;s Global Tool Configuration. (You may skip which is not relevant to your project)\nClick on Manage Jenkins, Global Tool Configuration, and scroll to JDK. Click on \u0026ldquo;Add JDK\u0026rdquo;, uncheck \u0026ldquo;Install Automatically\u0026rdquo; and give JAVA_HOME path. You can take the java home value from your system\u0026rsquo;s environment variable. On the same page, scroll to Git, click on \u0026ldquo;Add Git\u0026rdquo; and paste the git path. Scroll to Maven and check the \u0026ldquo;Install automatically\u0026rdquo; checkbox. It will populate the latest Maven version. Scroll till Allure, and check the \u0026ldquo;Install automatically\u0026rdquo; checkbox. It will populate the latest Allure version. Save the configuration and come to the Jenkins homepage.\nCreate a new Project in Jenkins # Go to the Jenkins dashboard, and click on New Item. Enter the project name as desired and click on Maven project (If the project is not maven, then you may select freestyle) and click OK. The created project should be visible on Jenkin\u0026rsquo;s dashboard.\nSetting up Bitbucket credentials under Jenkins\u0026rsquo;s project configuration # Next, we need to add the BitBucket repo URL and credentials in Jenkins. In organizations, we always use a private repo.\nLaunch the Bitbucket URL where you have uploaded the code. Open the repo and click on the clone button. Copy from \u0026ldquo;https\u0026rdquo; till \u0026ldquo;.git\u0026rdquo;, like below\nIn Jenkins, click on the created project. Click on Configure-\u0026gt; Source Code Management-\u0026gt; Select Git radio and enter repository URL as \u0026ldquo;\u0026rdquo;. In my case it is https://sonaldwi@bitbucket.org/sonaldwi/jenkinsdemo.git\nFor entering credentials, click on the Add button under Credentials, click on Jenkins, and enter your Bitbucket\u0026rsquo;s username and password (recently for security purposes, Bitbucket has introduced an app password. So, make sure to enter the app password). If you are using a public repo you may skip this step.\nUnder \u0026ldquo;Branches to build\u0026rdquo; mention the branch which you have used in bitbucket.\nUnder the \u0026ldquo;Build Triggers\u0026rdquo; section, check \u0026ldquo;Build when a change is pushed to Bitbucket\u0026rdquo;. With this, our configuration in Jenkins is done. Now we will create a bitbucket webhook which will actually trigger an automatic build in Jenkins as and when any update is pushed to the Bitbucket repo.\nCreate Jenkins webhook in Bitbucket repo # Launch Bitbucket, and go to the \u0026ldquo;Repository Settings\u0026rdquo; page of your repo.\nClick on \u0026ldquo;Webhooks\u0026rdquo; and click on \u0026ldquo;Add webhook\u0026rdquo;. Enter an appropriate title (Jenkins-webhook) and URL as \u0026ldquo;http:///bitbucket-hook/\u0026rdquo;. (Make sure to add \u0026ldquo;/\u0026rdquo; at the end of the webhook.)\nCheck \u0026ldquo;Skip certification verification\u0026rdquo; and let \u0026ldquo;push\u0026rdquo; be selected as the default selection in the Triggers section. Save it.\nRunning build manually in Jenkins # To test whether we are able to run manual jobs in Jenkins, go to the project created in Jenkins, and click \u0026ldquo;Build Now\u0026rdquo;.\nYou will see that if there are no errors, a job would start running, and you can check the console logs by clicking on the latest build from the \u0026ldquo;Build History\u0026rdquo; section and clicking on \u0026ldquo;Console Output\u0026rdquo;\nChecking out the Jenkins integration with Bitbucket # Now to check whether our integration is proper, perform an update in your repo (for testing purposes, you can add a readme file/ blank file/ delete any file) and push the code to the Bitbucket repo.\nAfter this, launch Jenkins and go to the project page from where you did the manual build process, and you should see a job running automatically since you made an update in Bitbucket.\n","date":"20 June 2022","permalink":"/post/jenkins-bitbucket-selenium/","section":"Articles","summary":"Shows you how to integrate you Jenkins CI with a Bitbucket repo, which you can use in your Selenium project","title":"Jenkins integration with Bitbucket for Selenium project"},{"content":"","date":"29 April 2022","permalink":"/tags/allure/","section":"Tags","summary":"","title":"allure"},{"content":" Introduction # Selenium is a widely used tool for automated testing of web applications. It is open-source, supports many programming languages, such as Java, Python, Ruby, C#, and Javascript, and works across multiple operating systems. However one of the missing features in Selenium is that it does not have any reporting mechanism.\nTest automation reporting is a crucial thing, and without any reporting tool it becomes difficult to get statistics from the automation results like how many test cases got executed, how many Pass/Fail, and so on.\nBe it manual or automation, reports should always be clear, and concise but comprehensive.\nConsidering the above points, in this blog I will help you understand how to integrate Allure reports with Selenium using Maven and TestNG.\nBelow are the main topics that I would be covering:\nWhat is Allure? Annotations in Allure Download Allure and set path in the system environment variable Adding Allure dependencies in pom.xml Running tests with Maven Generate Allure reports through the command line Viewing and understanding Allure reports What is Allure # Allure is an open-source framework designed to create interactive and comprehensive test reports by the Yandex QA Team\nIntegrating Allure with Selenium gives beautiful and presentable reports which have detailed information about the automation run. Basically, it generates reports based on maven surefire plugins.\nIt supports popular CI/CD platforms like Jenkins, TeamCity, Bamboo, Gradle, and Maven.\nAllure Reporting framework works fine with any test framework like TestNG, JUnit, etc.\nThere are several annotations in Allure reporting which give the following information in reports.\nThe severity of the TC, description of TC, steps involved in that, and screenshot for the failure scenario.\nAnnotations in Allure # First, let us get familiar with the annotations.\n@Epic @Features @Stories/@Story @Severity @Description @Step @Attachment Though this list is long, I would be explaining only a few Allure annotations that are used widely.\nIf you are familiar with TestNG annotations, understanding Allure annotations would be like a cakewalk😊\n@Severity: We can define any @Test with @Severity annotation with any of these values like BLOCKER, CRITICAL, NORMAL, MINOR, and TRIVIAL. By looking at this, we can understand the severity of the test if failed\n@Description: We can add a detailed description for each test method. Remember that this is different from the TestNG description attribute of @test annotation. Will see the difference in Allure reports later.\n@Step: In order to define steps in Java code, you need to annotate the respective methods with @Step annotation. When not specified, the step name is equal to the annotated method name.\n@Attachments: An attachment in Java code is simply a method annotated with @Attachment that returns either a String or byte[], which should be added to the report\nDownload Allure and set path in the system environment variable:\nGo to the Releases section of Allure on its GitHub page https://github.com/allure-framework/allure2/releases\nThe latest release would be at the top. Scroll down to the Assets section and download allure-2.17.3.zip (The current release is 2.17.3, you may take the latest release from GitHub when this gets older). Make sure you download the correct zip. Don\u0026rsquo;t download the source code.\nAfter downloading, paste the Allure zip in any folder say for example D:/, and extract its contents.\nAfter extracting, there should be folders as pictured below:\nOpen the system environment variables by clicking on the Windows icon on your system and searching for env. Open the system properties and click on Environment Variables.\nCopy the allure bin path where you have placed the allure unzipped file. In my case, it\u0026rsquo;s \u0026ldquo;D:\\Allure\\allure-2.17.3\\allure-2.17.3\\bin\u0026rdquo;. Select the \u0026ldquo;PATH\u0026rdquo; variable from system variables and click on Edit. Click on New in edit environment variables and paste the copied allure bin path. Save the settings.\nAdding Allure dependencies in maven\u0026rsquo;s pom.xml # Now let us add the dependencies in the pom.xml file.\nAssuming that Selenium and TestNG dependencies are already available in the pom.xml (You can refer to my earlier post for adding the selenium and TestNG dependencies if you wish to), let\u0026rsquo;s add Allure dependencies in pom.xml.\nOpen the pom.xml file in eclipse/ any editor that you are using and add the following dependencies related to the Allure:\naspectj property: Add aspectj property under \u0026lt;properties\u0026gt;\r\u0026lt;project.build.sourceEncoding\u0026gt;UTF-8\u0026lt;/project.build.sourceEncoding\u0026gt;\r\u0026lt;aspectj.version\u0026gt;1.9.9.1\u0026lt;/aspectj.version\u0026gt;\r\u0026lt;/properties\u0026gt; allure-testng dependency: Add allure-testng dependency under \u0026lt;dependency\u0026gt;\r\u0026lt;groupId\u0026gt;io.qameta.allure\u0026lt;/groupId\u0026gt;\r\u0026lt;artifactId\u0026gt;allure-testng\u0026lt;/artifactId\u0026gt;\r\u0026lt;version\u0026gt;2.17.3\u0026lt;/version\u0026gt;\r\u0026lt;/dependency\u0026gt; Maven compiler plugin and maven surefire plugin: Add maven compiler plugin under \u0026lt;plugin\u0026gt;\r\u0026lt;groupId\u0026gt;org.apache.maven.plugins\u0026lt;/groupId\u0026gt;\r\u0026lt;artifactId\u0026gt;maven-compiler-plugin\u0026lt;/artifactId\u0026gt;\r\u0026lt;version\u0026gt;3.8.1\u0026lt;/version\u0026gt;\r\u0026lt;/plugin\u0026gt; Add maven surefire plugin under . Inside maven surefire plugin add java agent argument line under and add aspectjweaver dependency under \u0026lt;plugin\u0026gt;\r\u0026lt;groupId\u0026gt;org.apache.maven.plugins\u0026lt;/groupId\u0026gt;\r\u0026lt;artifactId\u0026gt;maven-surefire-plugin\u0026lt;/artifactId\u0026gt;\r\u0026lt;version\u0026gt;2.22.2\u0026lt;/version\u0026gt;\r\u0026lt;configuration\u0026gt;\r\u0026lt;argLine\u0026gt; -javaagent:\u0026#34;${settings.localRepository}/org/aspectj/aspectjweaver/${aspectj.version}/aspectjweaver-${aspectj.version}.jar\u0026#34;\r\u0026lt;/argLine\u0026gt;\r\u0026lt;suiteXmlFiles\u0026gt;\r\u0026lt;suiteXmlFile\u0026gt;testng_jenkins.xml\u0026lt;/suiteXmlFile\u0026gt;\r\u0026lt;/suiteXmlFiles\u0026gt;\r\u0026lt;/configuration\u0026gt;\r\u0026lt;dependencies\u0026gt;\r\u0026lt;dependency\u0026gt;\r\u0026lt;groupId\u0026gt;org.aspectj\u0026lt;/groupId\u0026gt;\r\u0026lt;artifactId\u0026gt;aspectjweaver\u0026lt;/artifactId\u0026gt;\r\u0026lt;version\u0026gt;${aspectj.version}\u0026lt;/version\u0026gt;\r\u0026lt;/dependency\u0026gt;\r\u0026lt;/dependencies\u0026gt;\r\u0026lt;/plugin\u0026gt; If this is too confusing to understand do not worry. You can check the entire pom.xml in this bitbucket repository.\nRunning tests with maven # Now all the configuration in pom.xml is done. You need to run the testcases and generate the Allure report post-execution. So, for that make sure you don\u0026rsquo;t run your test cases from the testng.xml file and rather execute it from pom.xml. Because all the plugins related to the allure are been configured in pom.xml and not testing.xml\nBefore running mvn command (mvn clean test)to execute the testcases, make sure there are no errors in your project otherwise mvn will not build the project and hence your actual script execution won\u0026rsquo;t happen.\nBrowse till your maven project root directory in your local system(where pom.xml file is present) for which you need to run the testcases and generate Allure reports.\nFor me its \u0026ldquo;C:\\Users\\lenovo\\eclipse-workspace\\JenkinsDemo\u0026rdquo;\nIf you don\u0026rsquo;t have any maven project with you at the moment and you are too eager to see how the Allure report work, you can take a pull from this repository and try your hands on it.\nOpen the command prompt in that path and run the following command:\nmvn clean test The scripts should run and give some result either fail/pass\nTo generate Allure reports, on the same terminal, run the following command:\nallure serve allure-results Hit Enter, wait for some time, and Voila…..your default browser will open with the Allure results.\nThe above command generates a report in the temporary folder from the data found in target/surefire-reports/ and then creates a local Jetty server instance, serves generated report, and opens the HTML report in the default browser.\nThere are different sections in the Allure report such as Categories, Suites, Graphs, Timeline, etc. Access each link to get detailed information about the run.\nAs I mentioned earlier that @Description annotation in Allure is different from the description attribute of @Test in TestNG, the following picture explains that.\n","date":"29 April 2022","permalink":"/post/allure-report-selenium-testng-maven/","section":"Articles","summary":"Adding a reporting mechanism (Allure) to Selenium","title":"Allure Reporting in Selenium using TestNG and Maven"},{"content":"","date":"29 April 2022","permalink":"/tags/allure-reports/","section":"Tags","summary":"","title":"allure reports"},{"content":"","date":"29 April 2022","permalink":"/tags/reporting/","section":"Tags","summary":"","title":"reporting"},{"content":"","date":"9 April 2020","permalink":"/tags/api-automation/","section":"Tags","summary":"","title":"API Automation"},{"content":"","date":"9 April 2020","permalink":"/tags/json/","section":"Tags","summary":"","title":"JSON"},{"content":"","date":"9 April 2020","permalink":"/tags/karate/","section":"Tags","summary":"","title":"Karate"},{"content":" Introduction to Karate # Karate is an open-source web API automation framework used to automate APIs and it asserts that the JSON or XML responses are ‘as expected’.\nKarate is built on top of Cucumber, another BDD (Behaviour Driven Development) testing framework, and both share some of the concepts. One of these is the use of a Gherkin file. However, unlike Cucumber, tests aren’t written in Java and are fully described in the Gherkin file.\nNow, you would think if not Java which programming language I should know to use the karate framework? So, let me spill the beans for you, \u0026ldquo;No coding knowledge is required for Karate…\u0026rdquo;. Yes, you heard me right!\nWhy? Here is the list for all your questions # Java knowledge is not required and even non-programmers can write tests\nScripts are plain-text, require no compilation step or IDE, and teams can collaborate using Git or any other standard SCM (Source Code Management) tools\nTests are super-readable - as scenario data can be expressed in-line, in human-friendly JSON, XML, Cucumber Scenario Outline tables, or a payload builder approach unique to Karate\nNow, for people who have a fear to start automation or are less inclined toward automation and programming, let\u0026rsquo;s take this up as a starter for automation. And for folks who love programming and are doing wonders in their automation field, this would be icing on your resume.\nSo, all, let\u0026rsquo;s get started!!!\nPre-requisites # Eclipse installed (Refer to my medium post)\nMaven installed in Eclipse (Refer to my medium post)\nJava (8 and above) installed (Refer my medium post)\nDependencies required # Create a maven project and add the following 2 dependencies in pom.xml\n\u0026lt;dependency\u0026gt;\r\u0026lt;groupId\u0026gt;com.intuit.karate\u0026lt;/groupId\u0026gt;\r\u0026lt;artifactId\u0026gt;karate-apache\u0026lt;/artifactId\u0026gt;\r\u0026lt;version\u0026gt;0.9.5\u0026lt;/version\u0026gt;\r\u0026lt;scope\u0026gt;test\u0026lt;/scope\u0026gt;\r\u0026lt;/dependency\u0026gt;\r\u0026lt;dependency\u0026gt;\r\u0026lt;groupId\u0026gt;com.intuit.karate\u0026lt;/groupId\u0026gt;\r\u0026lt;artifactId\u0026gt;karate-junit4\u0026lt;/artifactId\u0026gt;\r\u0026lt;version\u0026gt;0.9.5\u0026lt;/version\u0026gt;\r\u0026lt;scope\u0026gt;test\u0026lt;/scope\u0026gt;\r\u0026lt;/dependency\u0026gt; This is the latest dependency taken from https://mvnrepository.com/\nFeature files and TestRunner.java class # A Karate test script has the file extension .feature which is the standard followed by Cucumber.\nLike Cucumber, you need to have a \u0026ldquo;Runner\u0026rdquo; class that runs the feature file(s). Unlike Cucumber, however, there are no step definitions! And this is the magic of Karate. Karate has pre-defined step definitions already present. So we just need to write feature files.\nSo bottom line is we need to create 2 types of files. One is TestRunner.java which would be our Runner file and other would be .feature file(s) for every feature/api\nTestRunner.java # Maven creates two structures \u0026ldquo;src/main/java\u0026rdquo; and \u0026ldquo;src/test/java\u0026rdquo;. Under src/test/java create a new package \u0026ldquo;com.api.feature\u0026rdquo; and under that package, create the class file as \u0026ldquo;TestRunner.java\u0026rdquo;\nBelow would be the code:\npackage com.api.feature;\rimport org.junit.runner.RunWith;\rimport com.intuit.karate.junit4.Karate;\r@RunWith(Karate.class)\rpublic class TestRunner {\r} Tip: To format code and indentations in eclipse, select all code by Ctrl+A and then format using Ctrl+Shift+F\nSample GET API for example # Now, before writing the feature file let\u0026rsquo;s learn which GET API we are going to automate.\nSuppose, we have to test a simple GET API as follows:\nAPI Url: \u0026#34;https://restcountries.eu/rest/v2/all\u0026#34;\rAPI method: GET\rAPI response: 200 OK with a list of countries For better understanding just copy \u0026ldquo;https://restcountries.eu/rest/v2/all\u0026quot; and paste it into the browser. You would see the details of all countries in raw format. Select all the raw data and validate it using any JSON validator. Copy all the raw data.\nOpen \u0026ldquo;https://jsonlint.com/\u0026quot;. Paste the raw data in textbox.\nClick on \u0026ldquo;Validate JSON\u0026rdquo; button\nThe above image says that our JSON response is correct, also it makes the JSON more readable.\nNow, with Karate we need to create a script for automating the above scenario and get the response. Also, we need to validate whether we are able to see any particular country details. For e.g:\nVerify whether \u0026ldquo;Afghanistan\u0026rdquo; is listed in response\nVerify whether Afghanistan\u0026rsquo;s currency code is \u0026ldquo;AFN\u0026rdquo;\nVerify whether Afghanistan\u0026rsquo;s language name is \u0026ldquo;Pashto\u0026rdquo;\nCountries.feature # Under the \u0026ldquo;com.api.feature\u0026rdquo; package (which was already created under src/test/java), let us create a feature file named \u0026ldquo;countries.feature\u0026rdquo;\nBelow would be the code:\nFeature: Check list of countries\rBackground:\r* url \u0026#39;https://restcountries.eu\u0026#39;\r* header Accept = \u0026#39;application/json\u0026#39;\rScenario: Get list of all countries\rGiven path \u0026#39;/rest/v2/all\u0026#39;\rWhen method GET\rThen status 200\rAnd match response.[*].name contains [\u0026#34;Afghanistan\u0026#34;]\rAnd match response.[*].currencies[*].code contains [\u0026#34;AFN\u0026#34;]\rAnd match response.[*].languages[*].name contains [\u0026#34;Pashto\u0026#34;] Explanation of the above feature file # Feature keyword denotes the Name of the feature under test.\nBackground can be considered a prerequisite and contains URL, header, and param options. (Background section is optional, \u0026ldquo;*\u0026rdquo; is the catch-all symbol that can be used instead \u0026ldquo;Given/ When/ Then\u0026rdquo;. You can think of it as bullet-point)\nThe scenario is the test case description. (A feature file can have more than 1 scenario and at least 1 scenario should be present)\nGiven is the prerequisite before the test steps get executed.\nWhen describes the specific condition which should match in order to execute the next step.\nThen describes what should happen if the condition mentioned in When is satisfied.\nAll above are Gherkin keywords which are the cucumber standard way of writing test scripts.\nThe path is the endpoint that we need to test.\nGET is the API method (Other methods are POST, PUT, DELETE).\n200 is the status/response code that we are expecting.\nCore keywords used in Karate DSL are url, path, request, method, and status. These are essential HTTP operations, they focus on setting one (un-named or \u0026lsquo;key-less\u0026rsquo;) value at a time and therefore don\u0026rsquo;t need a = sign in the syntax.\nUnder countries.feature file, in Scenario, after \u0026ldquo;Then status 200\u0026rdquo; statement, we can see there are 3 statements that have match keywords. These 3 are verification statements.\nJSON response verification using \u0026lsquo;match contains\u0026rsquo;: (Matching sub-sets of JSON Keys and Arrays)\nWhen JSON response is dynamic we can use \u0026ldquo;match (name) contains\u0026rdquo; to check for the existence of some keys.\nBelow is the explanation for all the 3 verification statements:\nAnd match response.[*].name contains [\u0026#34;Afghanistan\u0026#34;] Here, the response is the built-in variable that contains the whole JSON response body. If you have noticed, our JSON starts with an array (refer to the image \u0026lsquo;JSON Lint Validator\u0026rsquo;), so simply put a dot sign and then the array sign []. Under the array, we can see key-value pair(\u0026ldquo;name\u0026rdquo;: \u0026ldquo;Afghanistan\u0026rdquo;). Hence after [], put a dot and then key as \u0026rsquo;name\u0026rsquo;. Now we need to verify whether the name contains Afghanistan, hence write the \u0026ldquo;contains\u0026rdquo; keyword and then value as \u0026lsquo;Afghanistan\u0026rsquo;.\nAnd match response.[*].currencies[*].code contains [\u0026#34;AFN\u0026#34;] Here we need to traverse from first array [], then currencies array **currencies[]**, then key as \u0026lsquo;code\u0026rsquo; and value as \u0026lsquo;AFN\u0026rsquo;.\nAnd match response.[*].languages[*].name contains [\u0026#34;Pashto\u0026#34;] Here we need to traverse from first array [], then languages array **languages[]**, then key as \u0026rsquo;name\u0026rsquo; and value as \u0026lsquo;Pashto\u0026rsquo;\n###Some points to remember .feature file is space and case sensitive. There should be space between \u0026ldquo;*\u0026rdquo; and \u0026ldquo;url\u0026rdquo;. Same with all other key-value pairs under \u0026lsquo;Background\u0026rsquo;. Otherwise, it will give an error in console as \u0026ldquo;http request failed: url not set, please refer to the keyword documentation for \u0026lsquo;url\u0026rsquo; \u0026quot; * url \u0026#39;https://restcountries.eu\u0026#39; There should be space between the header option and \u0026ldquo;=\u0026rdquo;. Also, the space between \u0026ldquo;=\u0026rdquo; and the header option value * header Accept = \u0026#39;application/json\u0026#39; So far, we have \u0026ldquo;TestRunner.java\u0026rdquo; and \u0026ldquo;countries.feature\u0026rdquo; file created.\nNow, is the time to run our test. This would be achieved by running the \u0026ldquo;TestRunner.java\u0026rdquo; file.\nRunning TestRunner.java # To run TestRunner.java, right-click on it and Run As-\u0026gt; 1JUnit Test.\nOnce the test run is complete we should be able to see the JSON response in the eclipse console, which we observed in the browser before.\nObserve the JUnit tab has the details about test status (Pass in green, fail in red)\nReports # As we have used JUnit runner, by default the test reports would be saved under /target/surefire-reports/ as HTML files.\nJust refresh the target folder and we will see HTML report (in our case it should be \u0026lsquo;countries.html\u0026rsquo;). Open it in any browser to view the complete report.\nThat is it for this post. In the next post, I would explain in detail about Assert keywords used in Karate.\nYou can also refer to Karate\u0026rsquo;s official GitHub page which gives you a complete insight into Karate\n","date":"9 April 2020","permalink":"/post/karate-api-automation/","section":"Articles","summary":"Introduction to testing APIs through Automation, using Karate tool.","title":"Karate API automation"},{"content":" Now that you guys know how to execute the TestNG class and TestNG suite using testng.xml (if not, here is my Medium page), you would have also encountered failure of some testcases.\nThe reason for the failures can be anything such as a system, network, or browser issue. Failure can also occur due to many exceptions such as \u0026ldquo;NoSuchElementException\u0026rdquo;, \u0026ldquo;TimeOutException\u0026rdquo;, \u0026ldquo;StaleElementReferenceException\u0026rdquo;.\nAfter this as an automation engineer, you have to analyze each failure, do the RCA, and rerun the failed testcases again. TestNG has given us relief in this case too using the TestNG IRetryAnalyzer interface.\nFirstly create a class \u0026ldquo;Retry\u0026rdquo; which implements IRetryAnalyzer.\nHere:\nretryCount =0 maxRetryCount=3 You must implement unimplemented methods of the Retry class (i.e retry method) public boolean retry(ITestResult result) {\r// TODO Auto-generated method stub\rreturn false;\r} Important note for class Retry: \u0026ldquo;Retry\u0026rdquo; can be changed as per your project need. However \u0026ldquo;retry\u0026rdquo; method name should not be changed\nIn case, you want to decrease or increase the re-run number of test cases, you need to change the maxRetryCount value. In this example, failed test cases will run 3 times till it passes. In case it fails the third time, test execution will stop and TestNG will mark this case as failed.\nNow there are 2 ways depending on your project need how you would like to use the retry method At test level (Using retryAnalyzer attribute in the @Test annotation): Associate your test cases with IRetryAnalyzer. In order to do this, you need to use the method below.\n@Test(retryAnalyzer = Retry.class)\rpublic void testCase() {\r} At the run time (Using Retry Class with ITestAnnotationTransformer Interface) Due to the static nature of annotations, recompilation is needed when you want to change values. You can override this behavior at runtime with the IAnnotationTransformer listener.\nIAnnotationTransformer is a TestNG listener which allows you to modify TestNG annotations and configure them further during runtime.\nYou must implement the unimplemented method of RetryListener class. (i.e transform method)\npublic void transform(ITestAnnotation annotation, Class testClass, Constructor testConstructor, Method testMethod) {\r// TODO Auto-generated method stub\r} Imp note for class RetryListener: \u0026ldquo;RetryListener\u0026rdquo; can be changed as per your project need. However \u0026ldquo;transform\u0026rdquo; method name should not be changed\ntransform method is called for every test during the test run. We can use this listener for our retry analyzer as shown below: Finally, we will add this listener to our testng.xml file. \u0026lt;listeners\u0026gt;\r\u0026lt;listener class-name= \u0026#34;com.jio.rerun.RetryListener\u0026#34;/\u0026gt;\r\u0026lt;/listeners\u0026gt; Run the testng.xml file and you will see the results as follows: Here as we have mentioned \u0026ldquo;maxRetryCount=3\u0026rdquo;, \u0026ldquo;verifyMovieMetaDataPage\u0026rdquo; ran thrice before declaring it as a fail. And in the fourth attempt, it finally declared it a fail. ","date":"17 October 2018","permalink":"/post/rerun-failed-tcs/","section":"Articles","summary":"Part of the series related to writing testcases in TestNG","title":"How to Rerun Only Failed Testcases using TestNG"},{"content":"","date":"17 October 2018","permalink":"/tags/iretryanalyzer/","section":"Tags","summary":"","title":"IRetryAnalyzer"},{"content":"","date":"17 October 2018","permalink":"/tags/itestannotation/","section":"Tags","summary":"","title":"ITestAnnotation"},{"content":"","date":"17 October 2018","permalink":"/tags/testng/","section":"Tags","summary":"","title":"TestNG"},{"content":"","date":"5 July 2018","permalink":"/tags/eclipse/","section":"Tags","summary":"","title":"eclipse"},{"content":" Download eclipse from its official site: http://www.eclipse.org/downloads/\nGet the latest eclipse from downloads page according to your system OS and configuration. (In my case it is Linux, 64 bit)\nExtract the folder and open the eclipse-installer folder. Right click on eclipse-installer and choose “Run”\nChoose “Eclipse IDE for java Developers” and select “Install” button.\nAccept the agreement. Check “Remember accepted licenses” and Accept. If it prompts any type of certificates accept all certificates and click on “Accept selected”. After installation is completed, click on “Launch” button to launch eclipse. First screen will be welcome page. Close it and get started to write your first code in eclipse. ","date":"5 July 2018","permalink":"/post/installation-of-eclipse-on-ubuntu/","section":"Articles","summary":"How are we going to install Eclipse on Ubuntu? Part of a tutorial series.","title":"Installation of Eclipse on Ubuntu"},{"content":"","date":"5 July 2018","permalink":"/tags/linux/","section":"Tags","summary":"","title":"Linux\""},{"content":"","date":"5 July 2018","permalink":"/tags/ubuntu/","section":"Tags","summary":"","title":"ubuntu"},{"content":"","date":"27 May 2018","permalink":"/tags/config.properties/","section":"Tags","summary":"","title":"config.properties"},{"content":" Use of config.properties file in Selenium # Properties are used to externalize the data which is configurable and if you put that data in your code (test script) you have to build the code each time you want to change the value of the property. The main advantage of properties is that they are outside your source code and you can change them anytime. Each parameter is stored as a pair of strings, one storing the name of the parameter (called the key), and the other storing the value. Whatever constant and generic entities are there in our project, we can define in config.properties file How to create config.properties file # Open eclipse. Right click on the project, select New -\u0026gt; File -\u0026gt; Give filename as \u0026ldquo;config.properties\u0026rdquo; -\u0026gt; Finish. We cannot write java code in this. It is simple text file. Make sure to use extension as \u0026ldquo;properties\u0026rdquo; and not \u0026ldquo;property\u0026rdquo;. Write the following content in properties file in key: value pair format: name = Katy age = 26 url = https://www.google.com/ browser= chrome How to read config.properties file # Create a java class named ReadPropertyFile.java inside the same project where config.properties file is created -\u0026gt; include \u0026ldquo;public static main\u0026rdquo; method and Finish Now we have to create object of Properties class. Properties prop=new Properties(); // This class is available in java Create object of FileInputStream and give property file location as fileInputStream parameter (which property file is to be read) FileInputStream ip= new FileInputStream(“location of property file”); Now we have to load the property file. Use properties object to load property file prop.load(“fileInputStream object”) Final code should look something like this:\nProperties prop=new Properties(); FileInputStream ip= new FileInputStream(“home/username/PrjtName/src/config.properties”); prop.load(ip); Once the config file is loaded, we need to read the properties of config file. Properties object gives us a .getProperty method which takes the key of the property as a parameter and return the value of the matched key from the .properties file. System.out.println(prop.getProperty(\u0026#34;name\u0026#34;)); Make sure you use the same key as mentioned in properties file. This is case sensitive. If you use \u0026ldquo;Name\u0026rdquo; instead of \u0026ldquo;name\u0026rdquo;, it will print null in console, as \u0026ldquo;Name\u0026rdquo; is undefined If you comment \u0026ldquo;name\u0026rdquo; property by typing \u0026ldquo;#\u0026rdquo; in front of it in config.properties file and try to print \u0026ldquo;name\u0026rdquo; property System.out.println(prop.getProperty(\u0026ldquo;name\u0026rdquo;)), it will print null, as \u0026ldquo;name\u0026rdquo; is commented in properties file and hence cannot be accessed. In future if your browser is firefox, you just need to update your properties file, instead of editing the class files/ test-scripts. Avoid making changes in script. Nothing should be hard-coded at test-script level. ","date":"27 May 2018","permalink":"/post/create-read-configproperties-java-selenium/","section":"Articles","summary":"Describes the process of creating and reading config.properties file","title":"Create and Read config.properties file in Java for Selenium"},{"content":"","date":"27 May 2018","permalink":"/tags/java/","section":"Tags","summary":"","title":"java"},{"content":" How to install Java # Ubuntu 12.04 and earlier version uses Open JDK 6 as Default version, and Ubuntu 12.10+ versions have Open JDK 7\nMultiple steps to download java # I have installed java 8. Following are the steps to download java 8 from command-line. sudo apt-get install openjdk-8-jdk Note: Replace 8 with 6, 7 to install JAVA 6, 7 respectively\nInstall oracle java 8 by following command: sudo apt-get install oracle-java8-installer Note: Replace 8 with 6, 7 to install JAVA 6, 7 respectively\nInstall default java for your ubuntu system by following command: sudo apt-get install default-jdk After installation you may check java version by \u0026ldquo;java -version\u0026rdquo; command To view java path use command \u0026ldquo;which java\u0026rdquo; How to remove existing java\nsudo apt-get remove openjdk-10* (if installed java version is 10) How to set JAVA_HOME JAVA: To set JAVA_HOME globally in ~/.bashrc, launch terminal and type following: sudo gedit ~/.bashrc (This will open the bashrc file)\nAt the end of the file type the following, one line at a time:\nJAVA_HOME=/usr/lib/jvm/default-java/bin\rexport JAVA_HOME\rPATH=$PATH:$JAVA_HOME\rexport PATH Close the terminal and reopen it and type\necho $JAVA_HOME You should get the new java path.\n","date":"7 May 2018","permalink":"/post/install-java-ubuntu/","section":"Articles","summary":"Part of series teaching you setup your Selenium automation-lab on Ubuntu","title":"Installation of JAVA on Ubuntu"}]